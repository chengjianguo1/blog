(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{382:function(t,s,a){t.exports=a.p+"assets/img/1.1a033437.png"},383:function(t,s,a){t.exports=a.p+"assets/img/2.4f572942.png"},446:function(t,s,a){"use strict";a.r(s);var e=a(41),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_1-node-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-node-基本概念"}},[t._v("#")]),t._v(" 1.node 基本概念")]),t._v(" "),e("h2",{attrs:{id:"_1-1-一-node-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-一-node-是什么"}},[t._v("#")]),t._v(" 1.1 一.Node 是什么?")]),t._v(" "),e("p",[t._v("Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境(runtime),Node 不是一门语言是让 js 运行在后端的运行时,并且不包括 javascript 全集,因为在服务端中不包含 DOM 和 BOM,Node 也提供了一些新的模块例如 http,fs 模块等。Node.js 使用了事件驱动、非阻塞式 I/O 的模型，使其轻量又高效并且 Node.js 的包管理器 npm，是全球最大的开源库生态系统。事件驱动与非阻塞 IO 后面我们会一一介绍。到此我们已经对 node 有了简单的概念。")]),t._v(" "),e("h2",{attrs:{id:"_1-2-node-解决了哪些问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-node-解决了哪些问题"}},[t._v("#")]),t._v(" 1.2 .Node 解决了哪些问题?")]),t._v(" "),e("p",[t._v("Node 在处理高并发,I/O 密集场景有明显的性能优势")]),t._v(" "),e("ul",[e("li",[t._v("高并发,是指在同一时间并发访问服务器")]),t._v(" "),e("li",[t._v("I/O 密集指的是文件操作、网络操作、数据库,相对的有 CPU 密集,CPU 密集指的是逻辑处理运算、压缩、解压、加密、解密")])]),t._v(" "),e("blockquote",[e("p",[t._v("Web 主要场景就是接收客户端的请求读取静态资源和渲染界面,所以 Node 非常适合 Web 应用的开发。")])]),t._v(" "),e("h2",{attrs:{id:"_1-3-js-单线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-js-单线程"}},[t._v("#")]),t._v(" 1.3 JS 单线程")]),t._v(" "),e("p",[t._v("javascript 在最初设计时设计成了单线程,为什么不是多线程呢？如果多个线程同时操作 DOM 那岂不会很混乱？这里所谓的单线程指的是主线程是单线程的,所以在 Node 中主线程依旧是单线程的。")]),t._v(" "),e("ul",[e("li",[t._v("单线程特点是节约了内存,并且不需要在切换执行上下文")]),t._v(" "),e("li",[t._v("而且单线程不需要管锁的问题.")])]),t._v(" "),e("h2",{attrs:{id:"_1-4-同步异步和阻塞非阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-同步异步和阻塞非阻塞"}},[t._v("#")]),t._v(" 1.4 同步异步和阻塞非阻塞")]),t._v(" "),e("p",[e("img",{attrs:{src:a(382),alt:"效果图",title:"效果图"}})]),t._v(" "),e("h2",{attrs:{id:"_1-5-node-中的-event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-node-中的-event-loop"}},[t._v("#")]),t._v(" 1.5 Node 中的 Event Loop")]),t._v(" "),e("p",[e("img",{attrs:{src:a(383),alt:"效果图",title:"效果图"}})]),t._v(" "),e("ul",[e("li",[t._v("1.我们写的js代码会交给v8引擎进行处理")]),t._v(" "),e("li",[t._v("2.代码中可能会调用nodeApi,node会交给libuv库处理")]),t._v(" "),e("li",[t._v("3.libuv通过阻塞i/o和多线程实现了异步io")]),t._v(" "),e("li",[t._v("4.通过事件驱动的方式,将结果放到事件队列中,最终交给我们的应用。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("    本阶段执行已经被 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 和 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 的调度回调函数。\n   ┌───────────────────────────┐\n┌─"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("│           timers          │ \n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   执行延迟到下一个循环迭代的 "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" 回调。\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   仅系统内部使用。\n│  ┌─────────────┴─────────────┐\n│  │       idle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prepare       │\n│  └─────────────┬─────────────┘      \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  检索新的"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v("事件"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("执行与 "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v("相关的回调  ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   │\n│  │           poll            │"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("─────┤  connections"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" │\n│  └─────────────┬─────────────┘      │   data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" etc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  │\n│  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 回调函数在这里执行。  └───────────────┘\n│  ┌─────────────┴─────────────┐      \n│  │           check           │\n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  一些关闭的回调函数\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])])]),e("blockquote",[e("p",[t._v("这里每一个阶段都对应一个事件队列,当event loop执行到某个阶段时会将当前阶段对应的队列依次执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("process.nextTick()")]),t._v(" 从技术上讲不是事件循环的一部分.")])]),t._v(" "),e("h2",{attrs:{id:"_1-6-node中全局对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-node中全局对象"}},[t._v("#")]),t._v(" 1.6 Node中全局对象")]),t._v(" "),e("ul",[e("li",[t._v("Buffer")]),t._v(" "),e("li",[t._v("process")]),t._v(" "),e("li",[t._v("setInterval,setTimeout,setImmediate")]),t._v(" "),e("li",[t._v("console")]),t._v(" "),e("li",[t._v("queueMicrotask")])]),t._v(" "),e("h2",{attrs:{id:"_1-7-node中的模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-node中的模块"}},[t._v("#")]),t._v(" 1.7 node中的模块")]),t._v(" "),e("ul",[e("li",[t._v("__dirname")]),t._v(" "),e("li",[t._v("__filename")]),t._v(" "),e("li",[t._v("exports")]),t._v(" "),e("li",[t._v("module")]),t._v(" "),e("li",[t._v("require()")])])])}),[],!1,null,null,null);s.default=n.exports}}]);